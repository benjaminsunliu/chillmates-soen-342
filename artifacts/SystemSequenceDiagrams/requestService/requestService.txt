https://www.plantuml.com/plantuml/uml/TLBBRi8m4BpxArOSK43m0rQBgA8UUYaIZrFLWt6MOjMnKzj1xT_NoIOKdERaXsTdPsQzza6uK9UQ2HciWrmhD85LyL99LGaJOF9Gh_YByK65EYXh9Y0yt9oPj5gZRBQUm0UFaKa4eUr7Ypx4mv3p-Rj25re0ROUGLWv1ybmBxuVDTkWkIk8Mlshq1DrjyuHg3CSOTO3bwjOI1qUmhYZ3Lj-Ylzx_LBW0lrTbNB1PPkocl65hB7CuALDaCzOSO9ds8DE08y-TCfaoKna7vPykGcbnr9ZrLAaekXzo7wtLGAQk96aV2fo3FAFyx8BOND1fKMMzjhGVrJJLSGOSZ4tgxj4HCoBjBFohtMt-3_Kj4GxJQL_m7bFnDVPZ6ntNuXe-oCuAJOcamtpEmJl-A1sASCz3DCJo5tkUib00eYWoxyO-W7Vt1kCxyN3e743tNI6tvgHSAHeWMwCfwbB_0W00

@startuml
actor Client
participant "<u>:Institution" as Institution
collections "<u>:User Catalog" as UCat
participant "<u>:Expert" as Expert
participant "<u>:Client" as CClass
collections "<u>:ServiceRequest" as SRC
participant "<u>:ServiceRequest" as SR

Client -> Institution: requestService(expert, requestType, sTime, eTime)
Institution -> UCat: find()
UCat --> Institution: Expert e
UCat --> Institution: Client c
Institution -> Expert: isAvailable(Expert e, sTime, eTime)
Expert --> Institution: bool expertAvailable
Institution -> CClass: checkServiceOverlap(Client c, sTime, eTime)
CClass -> SRC: noServiceOverlap(sTime, eTime)
SRC --> Institution: bool hasNoSO
Institution -> UCat: [expertAvailable && hasNoSO] issueService(requestType, sTime, eTime, Expert e client c)
UCat -> SR **: sr:=create(requestType,sTime,eTime,Expert e, Client c)
UCat -> SRC: add(sr)
UCat --> Institution: sr
Institution --> Client: Service Request Confirmation
@enduml